/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import java.util.ArrayList;
import oca.project.PayrollReportItem;
import oca.project.Person;
import Forms.MainForm;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import oca.project.SalariedSubordinate;
import oca.project.TimePeriods;
import java.io.IOException;
import javax.swing.JOptionPane;
import oca.project.Launcher;

/**
 *
 * @author 91030283
 */
public class PayrollReportsForm extends javax.swing.JFrame {

    /**
     * Creates new form PayrollReportsForm
     */
    
     //declare and instantiate ArrayList of personsand main form
    private ArrayList<Person> persons = new ArrayList<>();
    private MainForm mainForm;
    
    //All payments button declarations
    public Date           firstDate             = new Date();
    public Date           secondDate            = new Date();
    public Date           selectedSalSubDate    = new Date();
    
    DateFormat            formate      = new SimpleDateFormat("dd/mm/yyyy");
    public String         strFirstDate  = "01/01/2015";
    public String         strSecondDate = "";
    public String         strSelectedSalSubDate = "";
    public String         Message = "";
    
    SalariedSubordinate selectedSalariedSubordinate;
    
    //combo box and model declarations
    DefaultComboBoxModel<Object> NameComboBoxsModel = new javax.swing.DefaultComboBoxModel<>();
    
    public PayrollReportsForm(ArrayList<PayrollReportItem> payrollReportItem) throws ParseException {
        initComponents();
        
       //as required to be the first date inserted page 1-61
        firstDateTxt.setText("01/01/2015");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        payrollJoptionPane = new javax.swing.JOptionPane();
        allPaymentsForPeriodBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        listOfFortnightlyBtn = new javax.swing.JButton();
        bonusReportBtn = new javax.swing.JButton();
        paymentByHistoryBtn = new javax.swing.JButton();
        listOfMonthlyBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        firstDateTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        secondDateTxt = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        paymentByHistoryComboBox = new javax.swing.JComboBox();
        jSeparator3 = new javax.swing.JSeparator();
        jButton6 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        PayrollTxtArea = new javax.swing.JTextArea();
        jScrollBar1 = new javax.swing.JScrollBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        allPaymentsForPeriodBtn.setBackground(new java.awt.Color(153, 255, 153));
        allPaymentsForPeriodBtn.setForeground(new java.awt.Color(51, 51, 255));
        allPaymentsForPeriodBtn.setText("All payements for a period");
        allPaymentsForPeriodBtn.setToolTipText("");
        allPaymentsForPeriodBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allPaymentsForPeriodBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 255));
        jLabel1.setText("Payroll Reports");

        listOfFortnightlyBtn.setBackground(new java.awt.Color(153, 255, 153));
        listOfFortnightlyBtn.setForeground(new java.awt.Color(51, 51, 255));
        listOfFortnightlyBtn.setText("List Fortnightly Payments");
        listOfFortnightlyBtn.setToolTipText("");
        listOfFortnightlyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listOfFortnightlyBtnActionPerformed(evt);
            }
        });

        bonusReportBtn.setBackground(new java.awt.Color(153, 255, 153));
        bonusReportBtn.setForeground(new java.awt.Color(51, 51, 255));
        bonusReportBtn.setText("Bonuses Report");
        bonusReportBtn.setToolTipText("");
        bonusReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bonusReportBtnActionPerformed(evt);
            }
        });

        paymentByHistoryBtn.setBackground(new java.awt.Color(153, 255, 153));
        paymentByHistoryBtn.setForeground(new java.awt.Color(51, 51, 255));
        paymentByHistoryBtn.setText("Payment History by person");
        paymentByHistoryBtn.setToolTipText("");
        paymentByHistoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentByHistoryBtnActionPerformed(evt);
            }
        });

        listOfMonthlyBtn.setBackground(new java.awt.Color(153, 255, 153));
        listOfMonthlyBtn.setForeground(new java.awt.Color(51, 51, 255));
        listOfMonthlyBtn.setText("List Monthly Payments");
        listOfMonthlyBtn.setToolTipText("");
        listOfMonthlyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listOfMonthlyBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 255));
        jLabel3.setText("First Date  :");
        jLabel3.setToolTipText("");

        firstDateTxt.setToolTipText("");
        firstDateTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstDateTxtActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 255));
        jLabel4.setText("Second Date :");

        secondDateTxt.setToolTipText("");
        secondDateTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondDateTxtActionPerformed(evt);
            }
        });

        paymentByHistoryComboBox.setBackground(new java.awt.Color(153, 255, 153));
        paymentByHistoryComboBox.setEditable(true);
        paymentByHistoryComboBox.setForeground(new java.awt.Color(51, 51, 255));
        paymentByHistoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentByHistoryComboBoxActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(153, 255, 153));
        jButton6.setForeground(new java.awt.Color(51, 51, 255));
        jButton6.setText("Back");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        PayrollTxtArea.setColumns(20);
        PayrollTxtArea.setRows(5);
        jScrollPane2.setViewportView(PayrollTxtArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(secondDateTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                                    .addComponent(firstDateTxt)))
                            .addComponent(allPaymentsForPeriodBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(paymentByHistoryComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bonusReportBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(paymentByHistoryBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listOfFortnightlyBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listOfMonthlyBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(616, 616, 616)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(firstDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(secondDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addComponent(allPaymentsForPeriodBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bonusReportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paymentByHistoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(paymentByHistoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(listOfFortnightlyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(listOfMonthlyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                            .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(250, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void firstDateTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstDateTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstDateTxtActionPerformed

    private void secondDateTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondDateTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_secondDateTxtActionPerformed

    private void allPaymentsForPeriodBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allPaymentsForPeriodBtnActionPerformed
        
        String strAllPayments = "" ;

        strSecondDate = secondDateTxt.getText();
        
        
        //try in case of exception thrown
        try
        {
            //System.out.println("in try");
            firstDate  = formate.parse(strFirstDate);
            secondDate = formate.parse(strSecondDate);
            
            for (Person person : persons)
            {   
               
                if (person instanceof SalariedSubordinate)
                {
                    //casting person into SalariedSubordinate subclass
                    selectedSalariedSubordinate = (SalariedSubordinate)person;
                    //strSelectedSalSubDate = selectedSalariedSubordinate.strStartOfPaymentDate;
                    selectedSalSubDate = formate.parse(selectedSalariedSubordinate.strStartOfPaymentDate);
                   
                    
                    //check if the payment date is within specified interval
                    if(selectedSalSubDate.after(firstDate) && selectedSalSubDate.before(secondDate) )
                    {
                        
                        strAllPayments +=  selectedSalariedSubordinate.firstName + " "+ selectedSalariedSubordinate.lastName + " was paid " + selectedSalariedSubordinate.getBaseSalary() + " on the "+ selectedSalariedSubordinate.strStartOfPaymentDate + " Payment Period : " + selectedSalariedSubordinate.getTimePeriod() +"\n " ;
                        
                    }

                    
                    
                }//first if
                else //no results to display
                    {
                        
                    }
            }//for
            
          if (strAllPayments.isEmpty())
            {
               throw new IOException();
            }  
            else
            {
                PayrollTxtArea.setText(strAllPayments)  ;
            }  
          
            
        }
        catch (IOException ioe)
        {
               Message = "Input data invalid!";
               JOptionPane.showMessageDialog(this, Message,"Announcement",JOptionPane.INFORMATION_MESSAGE);
            
        }
        catch (Exception e)
        {
               Message = "General error has occurred!";
               JOptionPane.showMessageDialog(this, Message,"Announcement",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_allPaymentsForPeriodBtnActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        
        this.setVisible(false);
        Launcher.mainForm.setVisible(true);
        

    }//GEN-LAST:event_jButton6ActionPerformed

    private void bonusReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bonusReportBtnActionPerformed
        double doubleSelectedSalSubBonus = 0;
        String strSelectedSalSubBonus = "";
        String strAllBonus = "" ;
        //try in case of exception thrown
        try
        {
           
            
            for (Person person : persons)
            {   
               
                if (person instanceof SalariedSubordinate)
                {
                    //casting person into SalariedSubordinate subclass
                    selectedSalariedSubordinate = (SalariedSubordinate)person;
                    
                    doubleSelectedSalSubBonus   = selectedSalariedSubordinate.getCurrentBonus();
                    strSelectedSalSubBonus      = String.valueOf(doubleSelectedSalSubBonus);
                    strAllBonus += selectedSalariedSubordinate.firstName + " "+ selectedSalariedSubordinate.lastName + " has bonus of "+ selectedSalariedSubordinate.getCurrentBonus() + "\n " ;
                    
                      
                }
                
                
            }//for
            
            if (strAllBonus.isEmpty())
            {
                Message = "Report contains no results to display!";
                payrollJoptionPane = new JOptionPane(Message,2,1);    
                payrollJoptionPane.setVisible(true);
            }  
            else
            {
                PayrollTxtArea.setText(strAllBonus);
            }
            
            
        }
        catch (Exception e)
        {
          Message = "General error has occurred!";
          payrollJoptionPane = new JOptionPane(Message,2,1);    
          payrollJoptionPane.setVisible(true);
        }

    }//GEN-LAST:event_bonusReportBtnActionPerformed

    private void paymentByHistoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentByHistoryBtnActionPerformed
         
        String strPaymentByHistory = selectedSalariedSubordinate.firstName + " "+ selectedSalariedSubordinate.lastName  + " was paid  "+String.valueOf(selectedSalariedSubordinate.getBaseSalary()) + "on the " + selectedSalariedSubordinate.strStartOfPaymentDate +" Payment period " + selectedSalariedSubordinate.getTimePeriod() +"\n";
        PayrollTxtArea.setText(strPaymentByHistory);
        



    }//GEN-LAST:event_paymentByHistoryBtnActionPerformed

    private void listOfFortnightlyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listOfFortnightlyBtnActionPerformed

        String strAllFortnightlyPayments = "";
        //try in case of exception thrown
        try
        {
           
            
            for (Person person : persons)
            {   
               
                if (person instanceof SalariedSubordinate)
                {
                    //casting person into SalariedSubordinate subclass
                    selectedSalariedSubordinate = (SalariedSubordinate)person;
                    
                    if(selectedSalariedSubordinate.getTimePeriod() == TimePeriods.FORTNIGHTLY)
                    {
                        
                        
                        strAllFortnightlyPayments += selectedSalariedSubordinate.firstName + " "+ selectedSalariedSubordinate.lastName  + " was paid  "+String.valueOf(selectedSalariedSubordinate.getBaseSalary()) + "on the " + selectedSalariedSubordinate.strStartOfPaymentDate +" Payment period " + selectedSalariedSubordinate.getTimePeriod()+ "\n" ;
                        
                    
                    }
                    
                    
                    
                    
                    
                    
                }//first if
            }//for
        
            if (strAllFortnightlyPayments.isEmpty())
            {
                Message = "Report contains no results to display!";
                payrollJoptionPane = new JOptionPane(Message,2,1);    
                payrollJoptionPane.setVisible(true);
            }  
            else
            {
                PayrollTxtArea.setText(strAllFortnightlyPayments);
            }
            
            
            
        }
        catch (Exception e)
        {
          Message = "General error has occurred!";
          payrollJoptionPane = new JOptionPane(Message,2,1);    
          payrollJoptionPane.setVisible(true);
        }

    }//GEN-LAST:event_listOfFortnightlyBtnActionPerformed

    private void listOfMonthlyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listOfMonthlyBtnActionPerformed
            String strAllMonthlyPayments = "";
        //try in case of exception thrown
        try
        {
            
            
            for (Person person : persons)
            {   
               
                if (person instanceof SalariedSubordinate)
                {
                    //casting person into SalariedSubordinate subclass
                    selectedSalariedSubordinate = (SalariedSubordinate)person;
                    
                    if(selectedSalariedSubordinate.getTimePeriod() == TimePeriods.MONTHLY)
                    {
                        
                        
                        strAllMonthlyPayments += selectedSalariedSubordinate.firstName + " "+ selectedSalariedSubordinate.lastName  + " was paid  "+String.valueOf(selectedSalariedSubordinate.getBaseSalary()) + "on the " + selectedSalariedSubordinate.strStartOfPaymentDate +" Payment period " + selectedSalariedSubordinate.getTimePeriod()+ "\n" ;
                        
                    
                    }
                   
                    
                }
            }//for
            
            if (strAllMonthlyPayments.isEmpty())
            {
                Message = "Report contains no results to display!";
                payrollJoptionPane = new JOptionPane(Message,2,1);    
                payrollJoptionPane.setVisible(true);
            }  
            else
            {
                PayrollTxtArea.setText(strAllMonthlyPayments);
            }
            
        }
        catch (Exception e)
        {
          Message = "General error has occurred!";
          payrollJoptionPane = new JOptionPane(Message,2,1);    
          payrollJoptionPane.setVisible(true);
        }
        

    }//GEN-LAST:event_listOfMonthlyBtnActionPerformed

    private void paymentByHistoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentByHistoryComboBoxActionPerformed

       selectedSalariedSubordinate =(SalariedSubordinate) paymentByHistoryComboBox.getSelectedItem();
    }//GEN-LAST:event_paymentByHistoryComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PayrollReportsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PayrollReportsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PayrollReportsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PayrollReportsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new PayrollReportsForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea PayrollTxtArea;
    private javax.swing.JButton allPaymentsForPeriodBtn;
    private javax.swing.JButton bonusReportBtn;
    private javax.swing.JTextField firstDateTxt;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JButton listOfFortnightlyBtn;
    private javax.swing.JButton listOfMonthlyBtn;
    private javax.swing.JButton paymentByHistoryBtn;
    private javax.swing.JComboBox paymentByHistoryComboBox;
    private javax.swing.JOptionPane payrollJoptionPane;
    private javax.swing.JTextField secondDateTxt;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the persons
     */
    public ArrayList<Person> getPersons() {
        return persons;
    }

    /**
     * @param persons the persons to set
     */
    public void setPersons(ArrayList<Person> persons) {
        this.persons = persons;
        for (Person person : persons) {
          
                NameComboBoxsModel.addElement(person);
                
            }    
                paymentByHistoryComboBox.setModel(NameComboBoxsModel);
    }

    /**
     * @return the mainForm
     */
    public MainForm getMainForm() {
        return mainForm;
    }

    /**
     * @param mainForm the mainForm to set
     */
    public void setMainForm(MainForm mainForm) {
        this.mainForm = mainForm;
    }
}
